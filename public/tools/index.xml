<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on GNU/Linux Toolkit</title>
    <link>http://150.136.68.59/tools/</link>
    <description>Recent content in Tools on GNU/Linux Toolkit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 25 Jul 2021 18:16:03 -0400</lastBuildDate><atom:link href="http://150.136.68.59/tools/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>make</title>
      <link>http://150.136.68.59/tools/make/</link>
      <pubDate>Sun, 25 Jul 2021 18:16:03 -0400</pubDate>
      
      <guid>http://150.136.68.59/tools/make/</guid>
      <description>make is a tool for organizing a build process for any programming language. Most programming projects involve some of sequential process of compiling source code files using various commands. A hierarchy develops where certain files might depend on the existence of others in order to assure a successful compilation, and therefore a successful program. At its simplest, make stores a list of these commands under a single name a &amp;ldquo;Makefile&amp;rdquo;. With a Makefile, all of these commands can then be run at once, hiding the complexities of the build process and preventing the builder from running potentially hundreds of commands manually over and over again.</description>
    </item>
    
    <item>
      <title>ffmpeg</title>
      <link>http://150.136.68.59/tools/ffmpeg/</link>
      <pubDate>Tue, 20 Jul 2021 18:30:37 -0400</pubDate>
      
      <guid>http://150.136.68.59/tools/ffmpeg/</guid>
      <description>ffmpeg is a video and image manipulator tool that can do just about anything.</description>
    </item>
    
    <item>
      <title>cmake</title>
      <link>http://150.136.68.59/tools/cmake/</link>
      <pubDate>Tue, 20 Jul 2021 14:32:04 -0400</pubDate>
      
      <guid>http://150.136.68.59/tools/cmake/</guid>
      <description>CMake is a tool that creates build setups for source code, allowing that code to be cross platform.
The root of a CMake entity is always defined by a CMakeLists.txt file.
 Bare Minimum Example File Templating  Bare Minimum Example . ├── CMakeLists.txt └── main.cpp CMakeLists.txt
cmake_minimum_required(VERSION 3.10)project(Main)add_executable(Main main.cpp)mkdir build cd build &amp;amp;&amp;amp; cmake .. File Templating CMake can format input files with variables specified in CMakeLists.txt, and produce an output in the build folder.</description>
    </item>
    
  </channel>
</rss>
